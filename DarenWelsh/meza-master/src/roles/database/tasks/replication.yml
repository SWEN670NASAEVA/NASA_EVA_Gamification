---
#
# The following conditionals are reused many times in the tasks in this file.
# As such, they've been encapsulated in these tasks and registered to vars.
# FIXME #812: The logic "not role_is_valid_slave|skipped" is awkward
- name: Check if valid slave
  command: /bin/true
  register: role_is_valid_slave
  when: >
    (mysql_replication_role == 'slave')
    and mysql_replication_user
    and (mysql_replication_master != '')
- name: Check if valid master
  command: /bin/true
  register: role_is_valid_master
  when: >
    (mysql_replication_role == 'master')
    and mysql_replication_user
    and (mysql_replication_master != '')


#
# Make sure MySQL user for replication exists on master
#
- name: Ensure replication user exists on master.
  mysql_user:
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE') }}"
    state: present
  when: >
    not role_is_valid_master|skipped

#
# Get slave replication status
#
- name: Check slave replication status.
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave
  when: >
    not role_is_valid_slave|skipped
- debug: { var: slave }

#
# Another commonly used conditional. Whether or not to configure a slave.
#
- name: Check if slave needs configuration
  command: /bin/true
  register: slave_needs_configuration
  when: >
    (
      (slave.Is_Slave is defined and not slave.Is_Slave)
      or (slave.Is_Slave is not defined and slave|failed)
      or (slave.Slave_IO_Running is defined and slave.Slave_SQL_Running == 'No')
      or (mysql_force_slave_configuration is defined and mysql_force_slave_configuration)
    )
- debug: { var: slave_needs_configuration }


#
# Get master replication status
#
- name: Check master replication status.
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_replication_master }}"
  register: master
  when: >
    not slave_needs_configuration|skipped
    and not role_is_valid_slave|skipped
- debug: { var: master }



#
# The following tasks are all related to getting a mysqldump from master and
# putting it on the slave(s). Of course this is only done if replication needs
# to be (re-)setup
#
- name: fetch list of wikis on master
  command: mysql -NBe "SELECT DISTINCT(TABLE_SCHEMA) FROM information_schema.tables WHERE TABLE_SCHEMA NOT IN ('information_schema', 'performance_schema', 'mysql')"
  register: mysql_content_databases
  delegate_to: "{{ mysql_replication_master }}"
  when: >
    not slave_needs_configuration|skipped
    and not role_is_valid_slave|skipped

- name: export dump file on master
  shell: "mysqldump --databases {{ mysql_content_databases.stdout }} | gzip > {{ m_tmp }}/mysqldump-onmaster.sql.gz"
  delegate_to: "{{ mysql_replication_master }}"
  when: >
    not slave_needs_configuration|skipped
    and not role_is_valid_slave|skipped



#
# Copying SQL files from one server to another *appears* to be somewhat
# complicated by the fact that the control server could *be* either the master
# or slave server. To get around this, copy all files into /tmp directories
# with different names.
# FIXME #788: Use role remote-mysqldump to send direct; don't create tmp files
#
- name: fetch dump file
  fetch:
    src: "{{ m_tmp }}/mysqldump-onmaster.sql.gz"
    dest: "{{ m_tmp }}/mysqldump-oncontrol.sql.gz"
    flat: yes
  delegate_to: "{{ mysql_replication_master }}"
  when: >
    not slave_needs_configuration|skipped
    and not role_is_valid_slave|skipped
- name: put dump file
  copy:
    src: "{{ m_tmp }}/mysqldump-oncontrol.sql.gz"
    dest: "{{ m_tmp }}/mysqldump-onslave.sql.gz"
  when: >
    not slave_needs_configuration|skipped
    and not role_is_valid_slave|skipped

#
# Import SQL file from above
#
- name: Import dump on slave(s)
  mysql_db:
    state: import
    name: all
    target: "{{ m_tmp }}/mysqldump-onslave.sql.gz"
  when: >
    not slave_needs_configuration|skipped
    and not role_is_valid_slave|skipped

#
# Stop slave, configure, start slave.
#
- mysql_replication:
    mode: stopslave
  when: >
    not slave_needs_configuration|skipped
    and not role_is_valid_slave|skipped
- name: Configure replication on the slave.
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
  ignore_errors: True
  when: >
    not slave_needs_configuration|skipped
    and not role_is_valid_slave|skipped
- name: Start replication.
  mysql_replication: mode=startslave
  when: >
    not slave_needs_configuration|skipped
    and not role_is_valid_slave|skipped
